#include <stdio.h>

#include "globals.hpp"

// Note: simulation uses doubles for maximum precision, but we want
// to use floats as the precision isn't need here and it's faster on the GPU.

float grid_x_start;
float grid_x_end;
float grid_y_start;
float grid_y_end;
float grid_z_start;
float grid_z_end;
uint64_t num_spheres;

// This file reads data from the binary file generated by the simulation.
static FILE *bin_file;

static void read_grid_dims() {
	double temp;
	fread(&temp, sizeof(double), 1, bin_file);
	grid_x_start = (float)temp;
	fread(&temp, sizeof(double), 1, bin_file);
	grid_x_end = (float)temp;
	fread(&temp, sizeof(double), 1, bin_file);
	grid_y_start = (float)temp;
	fread(&temp, sizeof(double), 1, bin_file);
	grid_y_end = (float)temp;
	fread(&temp, sizeof(double), 1, bin_file);
	grid_z_start = (float)temp;
	fread(&temp, sizeof(double), 1, bin_file);
	grid_z_end = (float)temp;
}

// Loads the state of the spheres in the next iteration.
// Also peeks ahead to read when the following iteration occurs.
// The visualiser needs to know this information.
// TODO: end of file
void get_next_iteration_sphere_state(double *time_to_next_iter) {

}

int init_parser(char *fp) {
	bin_file = fopen(fp, "rb");
	if (bin_file == NULL) {
		printf("Error: cannot open binary file %s\n", fp);
		return -1;
	}
	read_grid_dims();
	fread(&num_spheres, sizeof(uint64_t), 1, bin_file);
	get_next_iteration_sphere_state(NULL);
	return 0;
}